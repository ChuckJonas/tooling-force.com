package com.neowit.apex

import java.io.{PrintWriter, StringWriter, File}

import com.neowit.utils.FileUtils

import scala.util.{Failure, Success, Try}
import scala.xml.Node

class UnsupportedApexTypeException(msg: String) extends UnsupportedOperationException(msg)
/**
 * this helper singleton allows to generate blank/dummy apex files
 */
object StubFileGenerator {

    /**
     * using given Apex file generate a dummy version of that file
     * @param apiVersion - SFDC API version to use for dummy
     * @param parentFolder - where to save the file
     * @param file - actual file to make a dummy copy from
     * @param withMetaXml - do we need to generate -meta.xml file as well?
     * @return tuple: dummy-file, Option(its -meta.xml)
     */
    def generateStub(apiVersion: String, parentFolder: File, file: File, withMetaXml:Boolean = true ): Option[(File, Option[File])] = {
        val extension = FileUtils.getExtension(file)
        val fileName = file.getName.substring(0, file.getName.length - extension.length - 1)
        extension match {
            case "cls" => Some(generateClass(apiVersion, parentFolder, fileName, withMetaXml = true))
            case "trigger" => Some(generateTrigger(apiVersion, parentFolder, fileName, withMetaXml = true))
            case "page" => Some(generatePage(apiVersion, parentFolder, fileName, withMetaXml = true))
            case "component" => Some(generateComponent(apiVersion, parentFolder, fileName, withMetaXml = true))
            case x => None
        }

    }
    /**
     * @param apiVersion - e.g. 32.0
     * @param parentFolder - e.g. .../classes/
     * @param className - name without extension: e.g. MyClass
     * @param withMetaXml - if true then -meta.xml will be generated
     * @return tuple: class-file, Option(metaXmlFile)
     */
    def generateClass(apiVersion: String, parentFolder: File, className: String, withMetaXml:Boolean = true ): (File, Option[File]) = {
        val text =
            s"""
              |/**
              | * automatically generated by tooling-force.com: https://github.com/neowit/tooling-force.com
              | *
              | * This is a dummy class body used to disable real code and prepare for subsequent removal
              | */
              |public with sharing class $className {}
            """.stripMargin
        writeWithMetaXml(apiVersion, parentFolder, className + ".cls", text)
    }

    /**
     * @param apiVersion - e.g. 32.0
     * @param parentFolder - e.g. .../classes/
     * @param triggerName - name without extension: e.g. MyTrigger
     * @param withMetaXml - if true then -meta.xml will be generated
     * @return tuple: class-file, Option(metaXmlFile)
     */
    def generateTrigger(apiVersion: String, parentFolder: File, triggerName: String, withMetaXml:Boolean = true ): (File, Option[File]) = {
        val text =
            s"""
              |/**
              | * automatically generated by tooling-force.com: https://github.com/neowit/tooling-force.com
              | *
              | * This is a dummy trigger body used to disable real code and prepare for subsequent removal
              | */
              |trigger $triggerName on Account (before insert){}
            """.stripMargin
        writeWithMetaXml(apiVersion, parentFolder, triggerName + ".trigger", text)
    }

    /**
     * @param apiVersion - e.g. 32.0
     * @param parentFolder - e.g. .../pages/
     * @param pageName - name without extension: e.g. MyPage
     * @param withMetaXml - if true then -meta.xml will be generated
     * @return tuple: page-file, Option(metaXmlFile)
     */
    def generatePage(apiVersion: String, parentFolder: File, pageName: String, withMetaXml:Boolean = true ): (File, Option[File]) = {
        val text =
            s"""
              |<apex:page>
              |<!--
              | * automatically generated by tooling-force.com: https://github.com/neowit/tooling-force.com
              | *
              | * This is a dummy page body used to disable real code and prepare for subsequent removal
              |-->
              |</apex:page>
            """.stripMargin
        writeWithMetaXml(apiVersion, parentFolder, pageName + ".page", text)
    }

    /**
     * @param apiVersion - e.g. 32.0
     * @param parentFolder - e.g. .../components/
     * @param componentName - name without extension: e.g. MyComponent
     * @param withMetaXml - if true then -meta.xml will be generated
     * @return tuple: page-file, Option(metaXmlFile)
     */
    def generateComponent(apiVersion: String, parentFolder: File, componentName: String, withMetaXml:Boolean = true ): (File, Option[File]) = {
        val text =
            s"""
              |<apex:component>
              |<!--
              | * automatically generated by tooling-force.com: https://github.com/neowit/tooling-force.com
              | *
              | * This is a dummy component body used to disable real code and prepare for subsequent removal
              |-->
              |</apex:component>
            """.stripMargin
        writeWithMetaXml(apiVersion, parentFolder, componentName + ".component", text)
    }


    private def writeWithMetaXml(apiVersion: String, parentFolder: File, fileName: String, fileBodyText: String): (File, Option[File]) = {
        val file = new File(parentFolder, fileName)
        FileUtils.writeFile(fileBodyText, file)
        MetaXml.generateMetaXml(apiVersion, file) match {
            case Success(metaFile) =>
                (file, Some(metaFile))
            case Failure(e) =>
                val sw = new StringWriter
                e.printStackTrace(new PrintWriter(sw))
                println(sw.toString)
                (file, None)
        }

    }
}
